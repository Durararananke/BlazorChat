@page "/chatroom"

@rendermode InteractiveAuto

@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<PageTitle>ChatRoom</PageTitle>

<h3>ChatRoom</h3>
<BlazorChat.Client.Components.Avator />

<p>@userName</p>

<div>
    <input @bind="newGroupName" placeholder="New Group Name" />
    <input @bind="newGroupPwd" placeholder="Group PassWord" typeof="password" />
    <button @onclick="CreateGroup">Create New Group</button>
</div>

<div>
    <select @bind="groupName">
        <option value="">Select a group to join</option>
        @foreach (var g in existGroups)
        {
            <option value="@g">@g</option>
        }
    </select>
    <input @bind="groupPwd" placeholder="Group PassWord" typeof="password" />
    <button @onclick="JoinGroup">Join Group</button>
</div>

<div>
    <select @bind="currentGroup">
        <option value="">Select a group to chat</option>
        @foreach(var g in joinedGroups)
        {
            <option value="@g">@g</option>
        }
    </select>
    <button @onclick="LeaveGroup">Leave Group @currentGroup</button>
</div>

@if (!isConnected)
{
    <p>Connecting...</p>
}
else
{
    <div class="form-group">
        <label>
            <input @bind="message" @onkeyup="HandleKeyPress" />
            <button @onclick="SendMessageGroup" disabled="@(string.IsNullOrEmpty(currentGroup))">Send</button>
        </label>
    </div>

    @foreach(var g in joinedGroups)
    {
        <div>
            <h3>@g</h3>
            <h5>Members: </h5>
            <ul>
                @if (groupMembers?.ContainsKey(g) == true)
                {
                    @foreach (var member in groupMembers[g])
                    {
                        <li>@member</li>
                    }
                }
            </ul>
            <br>
            <h5>Messages: </h5>
            <ul>
                @foreach(var msg in messagesInGroup[g])
                {
                    <li>[@msg.timestamp] @msg.username: @msg.message</li>
                }
            </ul>
        </div>
        <br>
        <br>
    }
}

<div>
    <h4>System Message</h4>
    <ul>
        @foreach (var msg in systemMessages)
        {
            <li>@msg</li>
        }
    </ul>
</div>

@code {
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private string? userName;
    private string? message;
    private string? newGroupName;
    private string? newGroupPwd;
    private string? groupName;
    private string? groupPwd;
    private string? currentGroup;
    private List<string> systemMessages = new List<string>();
    private List<string> existGroups = new List<string>();
    private List<string> joinedGroups = new List<string>();
    private Dictionary<string, List<(string username, string message, TimeOnly timestamp)>> messagesInGroup = new Dictionary<string, List<(string username, string message, TimeOnly timestamp)>>();
    private Dictionary<string, List<string>> groupMembers = new Dictionary<string, List<string>>();

    protected override async Task OnInitializedAsync()
    {
        await GetUsername();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();


        hubConnection.On<string, string, string, TimeOnly>("ReceiveMessage", (groupName, username, message, timeStamp) =>
        {
            if (!messagesInGroup.ContainsKey(groupName))
            {
                messagesInGroup[groupName] = new List<(string, string, TimeOnly)>();
            }
            messagesInGroup[groupName].Add((username, message, timeStamp));
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, DateTime>("SystemMessage", (username, message, timeStamp) =>
        {
            systemMessages.Add($"[{timeStamp}] {username}: {message}");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<string>>("UpdateGroupList", (groupList) =>
        {
            existGroups = groupList;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string,List<string>>("UpdateGroupMember", (groupName,members) =>
        {
            if(!groupMembers.ContainsKey(groupName))
            {
                groupMembers[groupName] = new List<string>(); 
            }
            groupMembers[groupName] = members;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<bool, string>("JoinResult", (success, groupName) =>
        {
            if (success&&!joinedGroups.Contains(groupName))
            {
                currentGroup = groupName;
                joinedGroups.Add(currentGroup);
                if(!messagesInGroup.ContainsKey(groupName))
                {
                    messagesInGroup[groupName] = new List<(string, string, TimeOnly)>();
                }
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("LeaveResult", (groupName) =>
        {
            joinedGroups.Remove(groupName);
            messagesInGroup.Remove(groupName);
            currentGroup = null;
            InvokeAsync(StateHasChanged);
        });

        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // username = user.Identity?.IsAuthenticated == true ? user.Identity.Name : "Anonymous";

        // await GetUsername();
        await hubConnection.StartAsync();
        isConnected = true;
    }

    private async Task GetUsername()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity?.Name ?? "Anonymous"; 
    }

    private async Task CreateGroup()
    {
        if (!string.IsNullOrEmpty(newGroupName) && !string.IsNullOrEmpty(newGroupPwd))
        {
            await hubConnection.SendAsync("CreateGroup", newGroupName, newGroupPwd);
            existGroups.Add(newGroupName);
            newGroupName = string.Empty;
            newGroupPwd = string.Empty;
        }
    }

    private async Task JoinGroup()
    {
        await hubConnection.SendAsync("JoinGroup", groupName, groupPwd);
        groupPwd = string.Empty;
    }

    private async Task LeaveGroup()
    {
        if (!string.IsNullOrEmpty(currentGroup))
        {
            await hubConnection.SendAsync("LeaveGroup", currentGroup);
        }
    }

    private async Task SendMessageGroup()
    {
        if (!string.IsNullOrEmpty(message)&& !string.IsNullOrEmpty(currentGroup))
        {
            await hubConnection.SendAsync("SendMessageGroup", currentGroup, message);
            message = string.Empty;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageGroup();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
