@page "/chatroom"

@rendermode InteractiveAuto

@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]

<PageTitle>ChatRoom</PageTitle>

<h3>ChatRoom</h3>

<p>@userName</p>

@if (!string.IsNullOrEmpty(userAvatar))
{
    <img src="@userAvatar" alt="Selected Avatar" />
}
else
{
    <p>Loading avatar...</p>
}

<Avatar @ref="avatarComponent" SelectedAvatar="userAvatar" OnSelectAvatar="HandleAvatarSelected" />

<button @onclick="UpdateUserAvatar">Confirm</button>

<div>
    <input @bind="newGroupName" placeholder="New Group Name" />
    <input @bind="newGroupPwd" placeholder="Group PassWord" typeof="password" />
    <button @onclick="CreateGroup">Create New Group</button>
</div>

<div>
    <select @bind="groupName">
        <option value="">Select a group to join</option>
        @foreach (var g in existGroups)
        {
            <option value="@g">@g</option>
        }
    </select>
    <input @bind="groupPwd" placeholder="Group PassWord" typeof="password" />
    <button @onclick="JoinGroup">Join Group</button>
</div>

<div>
    <select @bind="currentGroup">
        <option value="">Select a group to chat</option>
        @foreach(var g in joinedGroups)
        {
            <option value="@g">@g</option>
        }
    </select>
    <button @onclick="LeaveGroup">Leave Group @currentGroup</button>
</div>

@if (!isConnected)
{
    <p>Connecting...</p>
}
else
{
    <div class="form-group">
        <label>
            <input @bind="message" @onkeyup="HandleKeyPress" />
            <button @onclick="SendMessageGroup" disabled="@(string.IsNullOrEmpty(currentGroup))">Send</button>
        </label>
    </div>

    @foreach(var g in joinedGroups)
    {
        <div>
            <h3>@g</h3>
            <h5>Members: </h5>
            <ul>
                @if (groupMembers?.ContainsKey(g) == true)
                {
                    @foreach (var member in groupMembers[g])
                    {
                        @(member.User)
                        <img src="@(member.Avatar)" alt="@(member.User)'s avatar" style="width: 32px; height: 32px; /* border-radius: 50%; */" />   
                    }
                }
            </ul>
            <br>
            <h5>Messages: </h5>
            <ul>
                @foreach(var msg in messagesInGroup[g])
                {
                    @* <li>
                        <img src="@msg.avatar" alt="@msg.username's avatar" style="width: 32px; height: 32px; border-radius: 50%;" />
                        [@msg.timestamp] @msg.username : @msg.message
                    </li> *@
                    <li class="message">
                        <img src="@msg.avatar" alt="@msg.username's avatar" class="avatar" />
                        <div class="message-content">
                            <div>
                                <span class="username">@msg.username</span>
                                <span class="timestamp">@msg.timestamp.ToString("HH:mm")</span>
                            </div>
                            <div class="message-text">@msg.message</div>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <br>
        <br>
    }
}

<div>
    <h4>System Message</h4>
    <ul>
        @foreach (var msg in systemMessages)
        {
            <li>@msg</li>
        }
    </ul>
</div>

<style>
    body {
        background-color: #2b313f; 
        color: #f3f9f1; 
    }

    ul {
        list-style-type: none;
        padding: 0;
    }

    li {
        display: flex;
        align-items: flex-start;
        margin-bottom: 10px;
    }

    .avatar {
        /* border-radius: 50%; */
        width: 32px;
        height: 32px;
        margin-right: 10px;
    }

    .message-content {
        display: flex;
        flex-direction: column;
    }

    .username {
        font-weight: bold;
        color: #7289da;
    }

    .timestamp {
        color: #72767d;
        font-size: 12px;
        margin-left: 5px;
    }

    .message-text {
        color: #dcddde;
    }
</style>

@code {
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private string? userName;
    private string? userAvatar;
    private string? message;
    private string? newGroupName;
    private string? newGroupPwd;
    private string? groupName;
    private string? groupPwd;
    private string? currentGroup;
    private List<string> systemMessages = new List<string>();
    private List<string> existGroups = new List<string>();
    private List<string> joinedGroups = new List<string>();
    private Dictionary<string, List<(string username, string avatar, string message, TimeOnly timestamp)>> messagesInGroup = new Dictionary<string, List<(string username, string avatar, string message, TimeOnly timestamp)>>();
    private Dictionary<string, List<GroupMember>> groupMembers = new Dictionary<string, List<GroupMember>>();
    private Avatar? avatarComponent;
    
    public class GroupMember
    {
        public string User { get; set; }
        public string Avatar { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        await GetUsername();
        // if (string.IsNullOrEmpty(userAvatar))
        // {
        //     // 在父组件初始化时调用随机选择
        //     await InitializeAvatar();
        // }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();


        hubConnection.On<string, string, string, string, TimeOnly>("ReceiveMessage", (groupName, username, avatar, message, timeStamp) =>
        {
            if (!messagesInGroup.ContainsKey(groupName))
            {
                messagesInGroup[groupName] = new List<(string, string, string, TimeOnly)>();
            }
            messagesInGroup[groupName].Add((username, avatar, message, timeStamp));
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, DateTime>("SystemMessage", (username, message, timeStamp) =>
        {
            systemMessages.Add($"[{timeStamp}] {username}: {message}");
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<string>>("UpdateGroupList", (groupList) =>
        {
            existGroups = groupList;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, List<GroupMember>>("UpdateGroupMember", (groupName, members) =>
        {
            if(!groupMembers.ContainsKey(groupName))
            {
                groupMembers[groupName] = new List<GroupMember>();
            }
            groupMembers[groupName] = members;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<bool, string>("JoinResult", (success, groupName) =>
        {
            if (success&&!joinedGroups.Contains(groupName))
            {
                currentGroup = groupName;
                joinedGroups.Add(currentGroup);
                if(!messagesInGroup.ContainsKey(groupName))
                {
                    messagesInGroup[groupName] = new List<(string, string, string, TimeOnly)>();
                }
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("LeaveResult", (groupName) =>
        {
            joinedGroups.Remove(groupName);
            messagesInGroup.Remove(groupName);
            currentGroup = null;
            InvokeAsync(StateHasChanged);
        });

        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // username = user.Identity?.IsAuthenticated == true ? user.Identity.Name : "Anonymous";

        // await GetUsername();
        await hubConnection.StartAsync();
        isConnected = true;
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (!firstRender)
    //     {
    //         await GetUsername();
    //     }
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(userAvatar))
        {
            await avatarComponent.RandomSelect();
        }
    }

    private async Task GetUsername()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity?.Name ?? "Anonymous";
        //userAvatar = user?.FindFirst("avatar")?.Value ?? "default-avatar-url";
    }

    // private async Task InitializeAvatar()
    // {
    //     // 调用子组件的随机选择方法
    //     await avatarComponent.RandomSelect();
    // }

    private void HandleAvatarSelected(string avatar)
    {
        userAvatar = avatar;
        StateHasChanged();
    }

    private async Task UpdateUserAvatar()
    {
        await hubConnection.SendAsync("UpdateUserAvatar", userAvatar);
    }

    private async Task CreateGroup()
    {
        if (!string.IsNullOrEmpty(newGroupName) && !string.IsNullOrEmpty(newGroupPwd))
        {
            await hubConnection.SendAsync("CreateGroup", newGroupName, newGroupPwd);
            existGroups.Add(newGroupName);
            newGroupName = string.Empty;
            newGroupPwd = string.Empty;
        }
    }

    private async Task JoinGroup()
    {
        await hubConnection.SendAsync("JoinGroup", groupName, groupPwd);
        groupPwd = string.Empty;
    }

    private async Task LeaveGroup()
    {
        if (!string.IsNullOrEmpty(currentGroup))
        {
            await hubConnection.SendAsync("LeaveGroup", currentGroup);
        }
    }

    private async Task SendMessageGroup()
    {
        if (!string.IsNullOrEmpty(message)&& !string.IsNullOrEmpty(currentGroup))
        {
            await hubConnection.SendAsync("SendMessageGroup", currentGroup, message);
            message = string.Empty;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessageGroup();
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
