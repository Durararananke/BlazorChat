@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using BlazorChat.Extensions
@using Microsoft.AspNetCore.Identity
@using BlazorChat.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager


<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<img src="@Input.Avatar" width="200" height="200" />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" class="form-control" placeholder="Please enter your Username." />
               @*  <input type="text" value="@username" class="form-control" placeholder="Please choose your username." /> *@
                <label for="username" class="form-label">Username</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <label>Avatar: </label>
                <InputRadioGroup @bind-Value="Input.Avatar">
                    @foreach (var avatar in avatars)
                    {
                        <InputRadio @key="@avatar" Value="@avatar" />
                        <img src="@avatar" alt="Avatar" width="50" height="50" />
                    }
                </InputRadioGroup>
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>


@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? avatar;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    
    private static readonly List<string> avatars = new List<string>
    {
        "/avatars/bakyura.svg",
        "/avatars/bakyura-2x.svg",
        "/avatars/eight.svg",
        "/avatars/gaki-2x.svg",
        "/avatars/gg.svg",
        "/avatars/junsui-2x.svg",
        "/avatars/kakka.svg",
        "/avatars/kanra.svg",
        "/avatars/kuromu-2x.svg"
    };
   
    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        avatar = await UserManager.GetAvatarUrlAsync(user);

        Input.UserName ??= username;
        Input.PhoneNumber ??= phoneNumber;
        Input.Avatar ??= avatar;
    }

    private async Task OnValidSubmitAsync()
    {
        bool hasChanges = false;
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                return;
            }
            hasChanges = true;
        }

        if (Input.UserName != username)
        {
            var setUserNameResult = await UserManager.SetUserNameAsync(user, Input.UserName);
            if (!setUserNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set user name.", HttpContext);
                return;
            }
            hasChanges = true;
        }

        if (Input.Avatar != avatar)
        {
            var setAvatarResult = await UserManager.SetAvatarUrlAsync(user, Input.Avatar);
            if (!setAvatarResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set avatar.", HttpContext);
                return;
            }
            hasChanges = true;
        }

        if (hasChanges)
        {
            await SignInManager.RefreshSignInAsync(user);
            RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
        }
        else
        {
            RedirectManager.RedirectToCurrentPageWithStatus("No changes were made to your profile", HttpContext);
        }
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }


        [Required(ErrorMessage ="Required")]
        [MinLength(3,ErrorMessage ="The name needs to be at least 3 characters.")]
        [Display(Name = "User name")]
        public string? UserName { get; set; }

        [Display(Name = "Avatar")]
        public string? Avatar { get; set; }
    }

}
