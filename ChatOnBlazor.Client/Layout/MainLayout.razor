@inherits LayoutComponentBase
@inject ISnackbar Snackbar

<MudThemeProvider Theme="MyCustomTheme" @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />@* Theme="_theme" *@
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudTooltip Text="@(_drawerOpen ? "Unpin sidebar" : "Pin sidebar")">
            <MudIconButton Icon="@(_drawerOpen ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen)"
                        Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudTooltip>
        <MudText Typo="Typo.h5" Class="ml-3">Ghoti</MudText>
        <MudSpacer />
        <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" />
        <MudIconButton Href="https://github.com/Durararananke/BlazorChat"
                   Target="_blank"
                   Variant="Variant.Text"
                   Icon="@Icons.Custom.Brands.GitHub"
                   Color="Color.Inherit"
                   Edge="Edge.End">
        </MudIconButton>
        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" /> *@
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">    
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        <CascadingValue Value="paperBackgroundColor" Name="paper">
            <CascadingValue Value="listItemBackgroundColor" Name="listItem">
                @Body
            </CascadingValue>
        </CascadingValue>
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;

    private MudTheme _theme = new();
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}

@code {
    private string drawerIcon => _drawerOpen ? Icons.Material.Filled.Lock : Icons.Material.Filled.LockOpen;
    MudTheme MyCustomTheme = new MudTheme()
    {
            PaletteLight = new PaletteLight()
            {
                Primary = "#f57c55",
                Secondary = "#519ad4",
                Surface = "#f8f8f7",
                Background = "#f6f5ec",
                AppbarBackground = "#f57c55",
                DrawerBackground = "#efeddf"
                
            },
            
            PaletteDark = new PaletteDark()
            {
                Surface = "#2d2534",
            },

            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "260px",
                DrawerWidthRight = "300px"
            },

            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Merriweather", "Helvetica", "Arial", "sans-serif" }
                }
            }
    };

    private string paperBackgroundColor => _isDarkMode
        ? MyCustomTheme.PaletteDark.Background.ToString() // 暗色模式
        : MyCustomTheme.PaletteLight.Background.ToString();
    
    private string listItemBackgroundColor => _isDarkMode
        ? MyCustomTheme.PaletteDark.Surface.ToString() // 暗色模式
        : MyCustomTheme.PaletteLight.Surface.ToString();
}

@code {
    protected override void OnInitialized()
    {
        // 设置默认位置为 Top-Start
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;

        base.OnInitialized();
    }
}
